# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Acesso a Dados
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Subprogramas -- Acesso a dados
Duas formas
#+latex: \vfill
1. Através da passagem de parâmetros
   - Nomes locais aos subprogramas (como variáveis locais)
   - Mais flexível, seguro e legível
2. Através de *acesso direto a variáveis não locais*
* Acesso a Variáveis não Locais

Variáveis não-locais
+ Declaradas em outro bloco (visível) dentro do programa
+ Acesso depende se o escopo é *estático* ou *dinâmico*

#+latex: \vfill\pause

_Escopo Dinâmico_
+ Simples de implementar
+ Descendo na pilha até encontrar a variável (Vínculo Dinâmico -- VD)

#+latex: \pause

_Escopo Estático_
+ Um pouco mais complexo
+ Dois métodos de localização das variáveis
  + Encadeamento estático (/static chain/)
  + Displays

* Acesso a Variáveis não Locais \small (Encadeamento Estático)

Cadeia de vínculos estáticos (VE) que conectam registros de ativação

Vincula todos os ancestrais estáticos de um subprograma

#+latex: \vfill\pause

Endereço de uma variável é uma *tupla* (profundidade, deslocamento)

#+latex: \vfill\pause

Gerenciamento do VE
- Na chamada
  - RA deve ser construído, VD é apenas o antigo FP
  - o VE deve apontar para o mais recente RA do pai estático

#+latex: \vfill\pause

- Melhor método
  - Se A chama B, então o VE de B deve apontar para o RA que é
    #+BEGIN_EXAMPLE
    profundidade(A) - profundidade(B) + 1
    #+END_EXAMPLE
    saltos ao longo do encadeamento estático começando em A
  - A profundidade (na sintaxe) de A e B é conhecida em compilação
    - Compilador pode gerar código para realizar os saldos \\
      (uma série de instruções =load=)

* Problemas do Encadeamento Estático

Encontrar uma variável pode envolver vários acessos
+ Igual ao nível de profundidade do subprograma

Deve-se localizar o RA mais recente do subprograma pai
  - Os saltos (instruções =load=) podem ser lentas

* Acesso a Variáveis não Locais \small (Display)

Vínculos estáticos ficam no *Display*
- É uma pilha separada somente de VE

Vetor que armazena uma lista de endereços dos RA
+ Na ordem em que estão aninhados
#+latex: \vfill
Custo constante no acesso a variáveis não locais

Deve-se gerenciar o display (a cada chamada e retorno)
- Da mesma forma que o encadeamento

* Exercício
Supor o código
  \scriptsize
  #+begin_src C
  A(){
    int vara;

    B(){
      int varb;

      C(){ int varc; }
      D(){ int varc; }
    }
    E(){
      int vare;
 
    }
  }
  #+end_src
\normalsize
A ordem de chamada é
  #+begin_src C
  A E B D C
  #+end_src
Fornecer
- o conteúdo detalhado do display em cada passo
- VE na pilha

* Observações

Blocos de código sem nome
1. Tratar como um subprograma sem parâmetro, ou seja, com RA
2. Alocar vars. locais no topo do RA do subprograma que o engloba


Expansão =inline=
+ Diferença de macros do pré-processador
