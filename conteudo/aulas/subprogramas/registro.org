# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Registro de Ativação
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Registro de Ativação (RA)
Formato depende da definição/implementação da LP

Em linguagens Algol-like, preocupa-se com os seguintes

+ *Método de passagem de parâmetro* (e.g., valor, referência)
+ *Alocação dinâmica* de variáveis locais na pilha
+ *Recursão* (mais de uma instância, com execução incompleta)
+ *Escopo estático* para acesso a variáveis não locais
    + Eventualmente escopo dinâmico para aquelas que o suportam

#+latex: \vfill

Formato de RA: há uma convenção entre compiladores
+ *Interoperabilidade*


* Registro de Ativação -- Caso Típico
Conteúdo de um Registro de Ativação (topo para baixo)
+ Variáveis Locais
+ Parâmetros
+ Vínculo Dinâmico (ponteiro para o RA do pai dinâmico)
+ Vínculo Estático (ponteiro para o RA do pai estático)
+ Endereço de Retorno (ponteiro para o segmento de código)
* Registro de Ativação -- Instâncias
Na invocação, criada e colocada no topo da pilha

Removida da pilha no momento do retorno

#+latex: \vfill\pause

Várias chamadas ao mesmo subprograma \\
  \rightarrow várias instâncias de registro de ativação
+ Chamadas recursivas

*** teste :noexport:
#+latex: \vfill
\pause Problema de estouro (/overflow/) de pilha \\
  (para programas com *vários fluxos*)
+ GCC 4.6.0 \rightarrow *SplitStacks*
    1. Pilha sempre tem espaço \rightarrow *Área de Guarda*
    2. Função verifica se RA cabe nesta área
    3. Se maior \rightarrow expansão do tamanho da pilha
* Registro de Ativação -- Organização
Membros endereçáveis com deslocamento sobre =fp= \\
  \rightarrow Por questões de *Desempenho* e Simplicidade

#+ATTR_LATEX: :width .45\linewidth
[[./img/ar.svg.png]]

* RA - Adicional
Duas partes
+ Parte de tamanho fixo
+ Parte de tamanho variável
#+latex: \vfill
\pause Variáveis locais de tamanho estático
+ Fazem parte da parte de tamanho fixa
\pause Variáveis locais de tamanho dinâmico
+ Alocados na parte de tamanho variável
+ Ponteiro e Descritor na parte de tamanho fixo
+ Exemplo em C99
    #+begin_src C99
    void square(int n, double M[n][n]){
       double T[n][n];
       //...
    }
    #+end_src  
* RA -- Exercício 1
Qual o tamanho do registro de ativação da seguinte função?
  #+begin_src C99
  void sub (float total, int parte) {
     int lista[30];
     float real;
     int m[parte];
  }
  #+end_src
Considerando que ela é chamada assim
  #+begin_src C99
  sub (3.14, 2);
  sub (1.07, 300);
  #+end_src
Tamanho da palavra é 4 bytes

Como ficam os deslocamentos?
* RA -- Exercício 2
Supor o código
  \scriptsize
  #+begin_src C
  A(){
    int va;

    B(){
      int vb;

      C(){ int vc; }
      D(){ int vc; }
    }
    E(){
      int ve;
 
    }
  }
  #+end_src
\normalsize
A ordem de chamada é
  #+begin_src C
  A E B D C
  #+end_src
Fornecer o conteúdo detalhado da pilha

* Sequência de Chamada
Parte da implementação de subprogramas

Código adicionado pelo compilador

Implementa as decisões de projeto

#+latex: \vfill

*Sequência de chamada* (executada pelo chamador)

*Prólogo* (executado pelo chamado, no início)

*Epílogo* (executado pelo chamado, no final)
* Sequência de Chamada
Sequência de chamada (chamador)
  1. Cria um novo registro de ativação
  2. Calcula o vínculo estático
  3. Salva o estado de execução atual (registradores)
  4. Passa os parâmetros (organizando-os na pilha)
  5. Passa o endereço de retorno para o chamado
  6. Transfere o controle
\pause Prólogo (chamado, início)
  1. Salva o antigo =fp= na pilha (como vínculo dinâmico)
  2. Aloca variáveis locais
\pause Epílogo (chamado, final)
  1. Prepara os parâmetros de retorno
  2. Disponibiliza o valor de retorno para o chamador
  3. Atualiza o =fp= e o =sp=
  4. Atualiza o estado de execução do chamador
  5. Transfere o controle

* Demo

#+begin_src shell :results output
gcc -g -o demo demo_one.c
objdump -d -S demo
#+end_src

#+RESULTS:
#+begin_example

demo:     file format elf64-x86-64


Disassembly of section .init:

00000000000004b8 <_init>:
 4b8:	48 83 ec 08          	sub    $0x8,%rsp
 4bc:	48 8b 05 25 0b 20 00 	mov    0x200b25(%rip),%rax        # 200fe8 <__gmon_start__>
 4c3:	48 85 c0             	test   %rax,%rax
 4c6:	74 02                	je     4ca <_init+0x12>
 4c8:	ff d0                	callq  *%rax
 4ca:	48 83 c4 08          	add    $0x8,%rsp
 4ce:	c3                   	retq   

Disassembly of section .plt:

00000000000004d0 <.plt>:
 4d0:	ff 35 32 0b 20 00    	pushq  0x200b32(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>
 4d6:	ff 25 34 0b 20 00    	jmpq   *0x200b34(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>
 4dc:	0f 1f 40 00          	nopl   0x0(%rax)

Disassembly of section .plt.got:

00000000000004e0 <__cxa_finalize@plt>:
 4e0:	ff 25 12 0b 20 00    	jmpq   *0x200b12(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 4e6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000004f0 <_start>:
 4f0:	31 ed                	xor    %ebp,%ebp
 4f2:	49 89 d1             	mov    %rdx,%r9
 4f5:	5e                   	pop    %rsi
 4f6:	48 89 e2             	mov    %rsp,%rdx
 4f9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
 4fd:	50                   	push   %rax
 4fe:	54                   	push   %rsp
 4ff:	4c 8d 05 ba 01 00 00 	lea    0x1ba(%rip),%r8        # 6c0 <__libc_csu_fini>
 506:	48 8d 0d 43 01 00 00 	lea    0x143(%rip),%rcx        # 650 <__libc_csu_init>
 50d:	48 8d 3d 18 01 00 00 	lea    0x118(%rip),%rdi        # 62c <main>
 514:	ff 15 c6 0a 20 00    	callq  *0x200ac6(%rip)        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 51a:	f4                   	hlt    
 51b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000520 <deregister_tm_clones>:
 520:	48 8d 3d 01 0b 20 00 	lea    0x200b01(%rip),%rdi        # 201028 <__TMC_END__>
 527:	55                   	push   %rbp
 528:	48 8d 05 f9 0a 20 00 	lea    0x200af9(%rip),%rax        # 201028 <__TMC_END__>
 52f:	48 39 f8             	cmp    %rdi,%rax
 532:	48 89 e5             	mov    %rsp,%rbp
 535:	74 19                	je     550 <deregister_tm_clones+0x30>
 537:	48 8b 05 9a 0a 20 00 	mov    0x200a9a(%rip),%rax        # 200fd8 <_ITM_deregisterTMCloneTable>
 53e:	48 85 c0             	test   %rax,%rax
 541:	74 0d                	je     550 <deregister_tm_clones+0x30>
 543:	5d                   	pop    %rbp
 544:	ff e0                	jmpq   *%rax
 546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 54d:	00 00 00 
 550:	5d                   	pop    %rbp
 551:	c3                   	retq   
 552:	0f 1f 40 00          	nopl   0x0(%rax)
 556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 55d:	00 00 00 

0000000000000560 <register_tm_clones>:
 560:	48 8d 3d c1 0a 20 00 	lea    0x200ac1(%rip),%rdi        # 201028 <__TMC_END__>
 567:	48 8d 35 ba 0a 20 00 	lea    0x200aba(%rip),%rsi        # 201028 <__TMC_END__>
 56e:	55                   	push   %rbp
 56f:	48 29 fe             	sub    %rdi,%rsi
 572:	48 89 e5             	mov    %rsp,%rbp
 575:	48 c1 fe 03          	sar    $0x3,%rsi
 579:	48 89 f0             	mov    %rsi,%rax
 57c:	48 c1 e8 3f          	shr    $0x3f,%rax
 580:	48 01 c6             	add    %rax,%rsi
 583:	48 d1 fe             	sar    %rsi
 586:	74 18                	je     5a0 <register_tm_clones+0x40>
 588:	48 8b 05 61 0a 20 00 	mov    0x200a61(%rip),%rax        # 200ff0 <_ITM_registerTMCloneTable>
 58f:	48 85 c0             	test   %rax,%rax
 592:	74 0c                	je     5a0 <register_tm_clones+0x40>
 594:	5d                   	pop    %rbp
 595:	ff e0                	jmpq   *%rax
 597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 59e:	00 00 
 5a0:	5d                   	pop    %rbp
 5a1:	c3                   	retq   
 5a2:	0f 1f 40 00          	nopl   0x0(%rax)
 5a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 5ad:	00 00 00 

00000000000005b0 <__do_global_dtors_aux>:
 5b0:	80 3d 71 0a 20 00 00 	cmpb   $0x0,0x200a71(%rip)        # 201028 <__TMC_END__>
 5b7:	75 2f                	jne    5e8 <__do_global_dtors_aux+0x38>
 5b9:	48 83 3d 37 0a 20 00 	cmpq   $0x0,0x200a37(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 5c0:	00 
 5c1:	55                   	push   %rbp
 5c2:	48 89 e5             	mov    %rsp,%rbp
 5c5:	74 0c                	je     5d3 <__do_global_dtors_aux+0x23>
 5c7:	48 8b 3d 52 0a 20 00 	mov    0x200a52(%rip),%rdi        # 201020 <__dso_handle>
 5ce:	e8 0d ff ff ff       	callq  4e0 <__cxa_finalize@plt>
 5d3:	e8 48 ff ff ff       	callq  520 <deregister_tm_clones>
 5d8:	c6 05 49 0a 20 00 01 	movb   $0x1,0x200a49(%rip)        # 201028 <__TMC_END__>
 5df:	5d                   	pop    %rbp
 5e0:	c3                   	retq   
 5e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 5e8:	f3 c3                	repz retq 
 5ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000005f0 <frame_dummy>:
 5f0:	55                   	push   %rbp
 5f1:	48 89 e5             	mov    %rsp,%rbp
 5f4:	5d                   	pop    %rbp
 5f5:	e9 66 ff ff ff       	jmpq   560 <register_tm_clones>

00000000000005fa <foo>:
#include <stdio.h>

void foo (int x, int y) {
 5fa:	55                   	push   %rbp
 5fb:	48 89 e5             	mov    %rsp,%rbp
 5fe:	48 83 ec 30          	sub    $0x30,%rsp
 602:	89 7d dc             	mov    %edi,-0x24(%rbp)
 605:	89 75 d8             	mov    %esi,-0x28(%rbp)
  int t;
  char name[16];
  t =7;
 608:	c7 45 fc 07 00 00 00 	movl   $0x7,-0x4(%rbp)
  if (x < 0) return;
 60f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
 613:	78 14                	js     629 <foo+0x2f>
  foo(x-y, t);
 615:	8b 45 dc             	mov    -0x24(%rbp),%eax
 618:	2b 45 d8             	sub    -0x28(%rbp),%eax
 61b:	8b 55 fc             	mov    -0x4(%rbp),%edx
 61e:	89 d6                	mov    %edx,%esi
 620:	89 c7                	mov    %eax,%edi
 622:	e8 d3 ff ff ff       	callq  5fa <foo>
 627:	eb 01                	jmp    62a <foo+0x30>
  if (x < 0) return;
 629:	90                   	nop
}
 62a:	c9                   	leaveq 
 62b:	c3                   	retq   

000000000000062c <main>:

int main()
{
 62c:	55                   	push   %rbp
 62d:	48 89 e5             	mov    %rsp,%rbp
  foo(10, 2);
 630:	be 02 00 00 00       	mov    $0x2,%esi
 635:	bf 0a 00 00 00       	mov    $0xa,%edi
 63a:	e8 bb ff ff ff       	callq  5fa <foo>
 63f:	b8 00 00 00 00       	mov    $0x0,%eax
}
 644:	5d                   	pop    %rbp
 645:	c3                   	retq   
 646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 64d:	00 00 00 

0000000000000650 <__libc_csu_init>:
 650:	41 57                	push   %r15
 652:	41 56                	push   %r14
 654:	41 89 ff             	mov    %edi,%r15d
 657:	41 55                	push   %r13
 659:	41 54                	push   %r12
 65b:	4c 8d 25 b6 07 20 00 	lea    0x2007b6(%rip),%r12        # 200e18 <__frame_dummy_init_array_entry>
 662:	55                   	push   %rbp
 663:	48 8d 2d b6 07 20 00 	lea    0x2007b6(%rip),%rbp        # 200e20 <__init_array_end>
 66a:	53                   	push   %rbx
 66b:	49 89 f6             	mov    %rsi,%r14
 66e:	49 89 d5             	mov    %rdx,%r13
 671:	4c 29 e5             	sub    %r12,%rbp
 674:	48 83 ec 08          	sub    $0x8,%rsp
 678:	48 c1 fd 03          	sar    $0x3,%rbp
 67c:	e8 37 fe ff ff       	callq  4b8 <_init>
 681:	48 85 ed             	test   %rbp,%rbp
 684:	74 20                	je     6a6 <__libc_csu_init+0x56>
 686:	31 db                	xor    %ebx,%ebx
 688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 68f:	00 
 690:	4c 89 ea             	mov    %r13,%rdx
 693:	4c 89 f6             	mov    %r14,%rsi
 696:	44 89 ff             	mov    %r15d,%edi
 699:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
 69d:	48 83 c3 01          	add    $0x1,%rbx
 6a1:	48 39 dd             	cmp    %rbx,%rbp
 6a4:	75 ea                	jne    690 <__libc_csu_init+0x40>
 6a6:	48 83 c4 08          	add    $0x8,%rsp
 6aa:	5b                   	pop    %rbx
 6ab:	5d                   	pop    %rbp
 6ac:	41 5c                	pop    %r12
 6ae:	41 5d                	pop    %r13
 6b0:	41 5e                	pop    %r14
 6b2:	41 5f                	pop    %r15
 6b4:	c3                   	retq   
 6b5:	90                   	nop
 6b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 6bd:	00 00 00 

00000000000006c0 <__libc_csu_fini>:
 6c0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000000006c4 <_fini>:
 6c4:	48 83 ec 08          	sub    $0x8,%rsp
 6c8:	48 83 c4 08          	add    $0x8,%rsp
 6cc:	c3                   	retq   
#+end_example

