# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent

* #1

A expressão =+*AB-CD= se torna =+ * 3 4 - 5 6= depois da substituição dos
valores. Como temos uma notação préfixada nesta expressão, devemos
considerar que os operandos de um operador encontram-se após o
operador. Desta forma, avaliamos as expressões da esquerda para a
direita (conforme a leitura tradicional), ou seja, =* 3 4= e depois =- 5
6=, obtendo a expressão =+ 12 (-1)= que, quando avaliada, se torna =11=.

A expressão =B C D A D - + - += se torna =4 5 6 3 6 - + - += depois da
substituição pelos valores das variáveis. Como a expressão está
explicitamente em notação pósfixada, onde o operador aparece depois de
seus operandos, devemos realizar avaliar =3 6 -= obtendo =(-3)=. Dessa
forma, obtemos a seguinte expressão =4 5 6 (-3) + - +=. Os próximos
passos de avaliação são =4 5 3 - += que, avaliando =5 3 -=, obtém-se =4 2
+=. Por fim, obtemos =6=.

Discussão sobre =( B C * D - +)=: vamos primeiro supor que =B C * D - += é
préfixada. Neste caso, os operandos devem aparecer depois dos
operadores. Isto ocorre apenas com o operador =*=, que tem como operando
a variável =D= e o resultado do operador =-=. Como este operador tem
somente um operando (o resultado do operador `+`), isto já é um
indício que esta expressão não é préfixada. Um segundo indício contra
a suposição desta expressão ser préfixada é que o operador `+` não
contém nenhum operando sob a suposição préfixada. Portanto, podemos
concluir que esta expressão não está em notação préfixada. Vamos agora
supor que =B C * D - += é pósfixada, onde os operadores aparecem depois
dos operandos. Sendo assim, =B C *= está em notação pósfixada, assim
como =B C * D -=. No entanto, o operador `+` tem somente um operando que
é o resultado da expressão =B C * D -=. Portanto, esta expressão também
não está em notação pósfixada.

Discussão sobre =* A B C -=: a expressão não é préfixada porque o
operador `-` não tem nenhum operando. Ela também não é pósfixada
porque o operador `*` não tem nenhum operando.

Discussão sobre =B B B * *=: a expressão é pósfixada pois o primeiro
operador `*` tem dois operandos =BB= e o segundo operador `*` tem dois
operandos: =B= e =B B *=.

* #2

| Pré                            | Pós                            |
|--------------------------------+--------------------------------|
| - + A - B / C D * 4 9          | A B C D / * + 4 9 -            |
| * * * * A B C D E              | A B C D E * * * *              |
| - - * A B + / C D 10           | A B * C D / - 10 +             |
| * - 10 8 9                     | 10 8 - 9 *                     |
| - * / 15 - 7 + 1 1 3 + 2 + 1 1 | 15 7 1 1 + - / 3 * 2 1 1 + + - |

* #3

| Passos                         |
|--------------------------------|
| - * / 15 - 7 _+ 1 1_ 3 + 2 + 1 1 |
| - * / 15 _- 7 2_ 3 + 2 + 1 1     |
| - * _/ 15 5_ 3 + 2 + 1 1         |
| - _* 3 3_ + 2 + 1 1              |
| - 9 + 2 _+ 1 1_                  |
| - 9 _+ 2 2_                      |
| _- 9 4_                          |
| 5                              |

* #4

Uma avaliação em curto-circuito ocorre quando é possível retornar o
valor da expressão sem avaliar ela por completo.

* #5

(por fazer)

* #6

Supondo que a linguagem de programação deste exercício aceite alvos
condicionais em comandos de atribuição, o código acima seria
equivalente a:
#+BEGIN_EXAMPLE
(teste == f() ? x : z) = y();
#+END_EXAMPLE
Este tipo de construção sintática está disponível na linguagem Perl,
por exemplo. O código original pode ser considerado mais legível que a
versão ternária, pois fica claro o comportamento. O código na sua
versão ternária é mais expressivo pois existe a mesma semântica com
uma menor quantidade de código.

* #7

O grafo a seguir é uma possível resposta para esta questão. Os números
no interior dos nós indicam as linhas de código correspondentes.

[[./grafo.png]]
