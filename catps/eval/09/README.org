* Avaliação CATP #09

** Sumário

| Código  | Mean |
|---------+------|
| ???341  | 9.44 |
| ???848  | 9.44 |
| ???950  | 8.89 |
| ???567  | 8.89 |
| ???688  | 8.33 |
| ???973  | 8.33 |
| ???820  | 8.33 |
| ???274  | 8.33 |
| ???866  | 7.78 |
| ???285  | 7.78 |
| ???653  | 7.78 |
| ???031  | 7.78 |
| ???262  | 7.22 |
| ???849  | 7.22 |
| ???288  | 6.67 |
| ???292  | 6.67 |
| ???249  | 5.56 |
| ???586  | 5.56 |
| ???259  | 4.44 |
| ???575  | 4.44 |
| ???410  | 3.89 |
| ???106  | 3.89 |
| ???8856 | 2.78 |

** Detalhamento da avaliação

| Código  | EX | Nota |
|---------+----+------|
| ???031  | E1 |  0.5 |
| ???031  | E2 |    0 |
| ???031  | E3 |    1 |
| ???031  | E4 |    1 |
| ???031  | E5 |    1 |
| ???031  | E6 |  0.5 |
| ???031  | E7 |    1 |
| ???031  | E8 |    1 |
| ???031  | E9 |    1 |
| ???106  | E1 |    0 |
| ???106  | E2 |    0 |
| ???106  | E3 |    0 |
| ???106  | E4 |    0 |
| ???106  | E5 |    1 |
| ???106  | E6 |    0 |
| ???106  | E7 |  0.5 |
| ???106  | E8 |    1 |
| ???106  | E9 |    1 |
| ???249  | E1 |    1 |
| ???249  | E2 |  0.5 |
| ???249  | E3 |    1 |
| ???249  | E4 |    0 |
| ???249  | E5 |  0.5 |
| ???249  | E6 |    0 |
| ???249  | E7 |    1 |
| ???249  | E8 |    1 |
| ???249  | E9 |    0 |
| ???259  | E1 |    0 |
| ???259  | E2 |    0 |
| ???259  | E3 |    0 |
| ???259  | E4 |    0 |
| ???259  | E5 |    1 |
| ???259  | E6 |    0 |
| ???259  | E7 |    1 |
| ???259  | E8 |    1 |
| ???259  | E9 |    1 |
| ???262  | E1 |  0.5 |
| ???262  | E2 |  0.5 |
| ???262  | E3 |    1 |
| ???262  | E4 |    1 |
| ???262  | E5 |  0.5 |
| ???262  | E6 |    0 |
| ???262  | E7 |    1 |
| ???262  | E8 |    1 |
| ???262  | E9 |    1 |
| ???274  | E1 |    1 |
| ???274  | E2 |  0.5 |
| ???274  | E3 |    1 |
| ???274  | E4 |    1 |
| ???274  | E5 |    1 |
| ???274  | E6 |    1 |
| ???274  | E7 |    1 |
| ???274  | E8 |    0 |
| ???274  | E9 |    1 |
| ???285  | E1 |    1 |
| ???285  | E2 |  0.5 |
| ???285  | E3 |    1 |
| ???285  | E4 |    1 |
| ???285  | E5 |    1 |
| ???285  | E6 |    0 |
| ???285  | E7 |  0.5 |
| ???285  | E8 |    1 |
| ???285  | E9 |    1 |
| ???288  | E1 |    1 |
| ???288  | E2 |  0.5 |
| ???288  | E3 |    1 |
| ???288  | E4 |    1 |
| ???288  | E5 |  0.5 |
| ???288  | E6 |    0 |
| ???288  | E7 |    1 |
| ???288  | E8 |    0 |
| ???288  | E9 |    1 |
| ???292  | E1 |    1 |
| ???292  | E2 |  0.5 |
| ???292  | E3 |    1 |
| ???292  | E4 |    1 |
| ???292  | E5 |  0.5 |
| ???292  | E6 |    0 |
| ???292  | E7 |    1 |
| ???292  | E8 |    0 |
| ???292  | E9 |    1 |
| ???341  | E1 |    1 |
| ???341  | E2 |  0.5 |
| ???341  | E3 |    1 |
| ???341  | E4 |    1 |
| ???341  | E5 |    1 |
| ???341  | E6 |    1 |
| ???341  | E7 |    1 |
| ???341  | E8 |    1 |
| ???341  | E9 |    1 |
| ???410  | E1 |    1 |
| ???410  | E2 |    0 |
| ???410  | E3 |    0 |
| ???410  | E4 |    0 |
| ???410  | E5 |  0.5 |
| ???410  | E6 |    1 |
| ???410  | E7 |    0 |
| ???410  | E8 |    0 |
| ???410  | E9 |    1 |
| ???567  | E1 |    1 |
| ???567  | E2 |    0 |
| ???567  | E3 |    1 |
| ???567  | E4 |    1 |
| ???567  | E5 |    1 |
| ???567  | E6 |    1 |
| ???567  | E7 |    1 |
| ???567  | E8 |    1 |
| ???567  | E9 |    1 |
| ???575  | E1 |    0 |
| ???575  | E2 |    0 |
| ???575  | E3 |    0 |
| ???575  | E4 |    0 |
| ???575  | E5 |  0.5 |
| ???575  | E6 |  0.5 |
| ???575  | E7 |    1 |
| ???575  | E8 |    1 |
| ???575  | E9 |    1 |
| ???586  | E1 |    1 |
| ???586  | E2 |  0.5 |
| ???586  | E3 |    0 |
| ???586  | E4 |    0 |
| ???586  | E5 |    1 |
| ???586  | E6 |  0.5 |
| ???586  | E7 |    1 |
| ???586  | E8 |    0 |
| ???586  | E9 |    1 |
| ???653  | E1 |  0.5 |
| ???653  | E2 |    0 |
| ???653  | E3 |    1 |
| ???653  | E4 |    1 |
| ???653  | E5 |    1 |
| ???653  | E6 |  0.5 |
| ???653  | E7 |    1 |
| ???653  | E8 |    1 |
| ???653  | E9 |    1 |
| ???688  | E1 |  0.5 |
| ???688  | E2 |  0.5 |
| ???688  | E3 |    1 |
| ???688  | E4 |    1 |
| ???688  | E5 |  0.5 |
| ???688  | E6 |    1 |
| ???688  | E7 |    1 |
| ???688  | E8 |    1 |
| ???688  | E9 |    1 |
| ???820  | E1 |    1 |
| ???820  | E2 |    1 |
| ???820  | E3 |    1 |
| ???820  | E4 |    1 |
| ???820  | E5 |    1 |
| ???820  | E6 |    1 |
| ???820  | E7 |    0 |
| ???820  | E8 |    1 |
| ???820  | E9 |  0.5 |
| ???848  | E1 |    1 |
| ???848  | E2 |  0.5 |
| ???848  | E3 |    1 |
| ???848  | E4 |    1 |
| ???848  | E5 |    1 |
| ???848  | E6 |    1 |
| ???848  | E7 |    1 |
| ???848  | E8 |    1 |
| ???848  | E9 |    1 |
| ???849  | E1 |  0.5 |
| ???849  | E2 |  0.5 |
| ???849  | E3 |    1 |
| ???849  | E4 |    1 |
| ???849  | E5 |  0.5 |
| ???849  | E6 |    0 |
| ???849  | E7 |    1 |
| ???849  | E8 |    1 |
| ???849  | E9 |    1 |
| ???866  | E1 |  0.5 |
| ???866  | E2 |  0.5 |
| ???866  | E3 |    1 |
| ???866  | E4 |  0.5 |
| ???866  | E5 |    1 |
| ???866  | E6 |  0.5 |
| ???866  | E7 |    1 |
| ???866  | E8 |    1 |
| ???866  | E9 |    1 |
| ???8856 | E1 |    0 |
| ???8856 | E2 |    0 |
| ???8856 | E3 |    0 |
| ???8856 | E4 |    0 |
| ???8856 | E5 |    0 |
| ???8856 | E6 |  0.5 |
| ???8856 | E7 |    1 |
| ???8856 | E8 |    0 |
| ???8856 | E9 |    1 |
| ???950  | E1 |    1 |
| ???950  | E2 |    0 |
| ???950  | E3 |    1 |
| ???950  | E4 |    1 |
| ???950  | E5 |    1 |
| ???950  | E6 |    1 |
| ???950  | E7 |    1 |
| ???950  | E8 |    1 |
| ???950  | E9 |    1 |
| ???973  | E1 |    1 |
| ???973  | E2 |    1 |
| ???973  | E3 |    1 |
| ???973  | E4 |    1 |
| ???973  | E5 |  0.5 |
| ???973  | E6 |    1 |
| ???973  | E7 |    1 |
| ???973  | E8 |    0 |
| ???973  | E9 |    1 |
|---------+----+------|

** Respostas

1. O segmento de dados deste programa é vazio, pois não existe nenhuma
   variável global nem variáveis estáticas dentro das funções
   declaradas. Quando a execução atinge a linha 12 deste programa, a
   única variável alocada no monte é =tmp=. A alocação de
   memória para o conteúdo de =tmp= é realizada na linha
   1. Ao atingir a linha 12 deste programa, as variáveis alocadas
   dinamicamente na pilha são as seguintes (em direção ao topo da
   pilha): =char *dia= (linha 16), =char diaExt[][4]= (linha 9) e =char
   *tmp= (linha 11).

2. O segmento de dados deste programa é vazio, pois não existe nenhuma
   variável global nem variáveis estáticas dentro das funções
   declaradas. Ao atingir a linha 11 deste programa, não existe
   nenhuma variável alocada dinamicamente no monte. As variáveis
   alocadas dinamicamente na pilha são as seguintes (em direção ao
   topo da pilha): =char dia[4]= (linha 15), =char *dia= (linha 8) e =char
   diaExt[][4]= (linha 9).

3. Supondo o início da execução deste programa pelo código da função
   =main=. O conteúdo da pilha, em direção ao seu topo (na tabela
   abaixo, o topo da pilha é a última linha da tabela) quando a
   execução atinge a linha 8, é o seguinte:

   |---+----------+----------+-----------------+----------------------|
   |   | *Conteúdo* | *Variável* | *Tamanho (bytes)* | *Registro de ativação* |
   |---+----------+----------+-----------------+----------------------|
   | / | <c>      | <c>      |                 | <l>                  |
   |   | 2        | p        | sizeof(int)     | =main=                 |
   |---+----------+----------+-----------------+----------------------|
   |   | 0        | w        | sizeof(int)     | =foo1=                 |
   |   | 2        | z        | sizeof(int)     | =foo1=                 |
   |   | "OK"     | str      | sizeof(char*)   | =foo1=                 |
   |   | 2        | x        | sizeof(int)     | =foo1=                 |
   |   | 0        | y        | sizeof(int)     | =foo1=                 |
   |---+----------+----------+-----------------+----------------------|
   |   | 0        | x        | sizeof(int)     | =foo2=                 |
   |   | 2        | y        | sizeof(int)     | =foo2=                 |
   |   | "OK"     | str      | sizeof(char*)   | =foo2=                 |
   |---+----------+----------+-----------------+----------------------|

4. O segmento de dados deste programa comporta a variável global
   =diaExt=, de 4 bytes. Nenhuma variável é alocada dinamicamente no
   monte (considerando apenas o código desta questão). As variáveis
   alocadas dinamicamente na pilha são apresentadas na tabela abaixo.
   Supondo o início da execução deste programa pelo código da função
   =main=. O conteúdo da pilha, em direção ao seu topo (na tabela
   abaixo, o topo da pilha é a última linha da tabela) quando a
   execução atinge a linha 12, é o seguinte:

   |---+----------+----------+------------------+----------------------|
   |   | *Conteúdo* | *Variável* | *Tamanho (bytes)*  | *Registro de ativação* |
   |---+----------+----------+------------------+----------------------|
   | / | <c>      | <c>      |                  | <l>                  |
   |   |          |          |                  | =main=                 |
   |---+----------+----------+------------------+----------------------|
   |   | ...      | diasExt  | sizeof(char)*7*4 | =diaSemanaExtenso=     |
   |---+----------+----------+------------------+----------------------|

5. Um sistema de tipos de uma linguagem de programação é um mecanismo
   para definir tipos e associá-los às construções da linguagem
   (variáveis, função, literal, expressões, etc). Ele consiste
   igualmente em um conjunto de regras (equivalência, compatibilidade,
   inferência) sobre os tipos das linguagem. Um sistema de tipos não é
   essencial em uma linguagem de programação.

6. A implementação do tipo =long= em Python é independente da
   arquitetura, podendo virtualmente conter qualquer número inteiro,
   supondo que memória disponível. As operações são realizadas em
   nível de software, com implementação específica, portanto mais
   lentas do que do tipo =long= tradicional da arquitetura da máquina. É
   uma abordagem semelhante daquela implementada em Prolog, onde
   existe uma desconexão dos tipos numéricos (inteiros, ponto
   flutuantes) daqueles disponíveis e implementados pela arquitetura.

7. Construções de tipo =union= foram criadas em uma época onde as
   restrições de tamanho de memória eram marcantes. Atualmente, estas
   restrições não mais se aplicam para o desenvolvimento de programas
   de uma maneira geral. Esse tipo de construção de linguagem ainda é
   útil em algumas áreas como em dispositivos com memória reduzida.

8. Todas as declarações dentro de uma construção =union= ocupam o mesmo
   espaço de memória. O tamanho da união é sempre igual ao tamanho da
   maior variável declarada dentro dela. Neste caso são os 100 bytes
   da declaração de =str=.

9. Considerando apenas a declaração de =struct element=, sem contar que
   ela pode estar dentro de outras construções da linguagem (vetores,
   outras =struct=, etc) é 28 bytes. A variável =name= tem 3 bytes
   perdidos, a variável =sobre= tem 1 byte perdido e, por fim, a
   variável =c= tem 3 bytes perdidos. No entanto, o tamanho de =struct
   element= deve estar igualmente alinhado. Por causa disso, seu
   tamanho final é de 32 bytes uma vez que o tamanho de 28 bytes não é
   alinhado.

   Para o cálculo de =struct chave=, temos os primeiros 9 bytes alocados
   para a variável =name=, em seguida, a variável =c= é alocada justamente
   após o final da variável =name=, mantendo o alinhamento de 2 em 2
   bytes.  A variável =k= fica alinhada imediatamente após a variável
   =c=. Pelo fato que a próxima variável é do tipo inteiro, perdemos
   aqui 1 byte. Por fim, a variável =x= ocupa os 4 bytes finais. Total:
   16 bytes.


