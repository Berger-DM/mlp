# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent

* CATP #05
** Processo de Inferência
*** Exercício 1

Considerando a seguinte base de conhecimento no arquivo =gosta1.pl=

#+BEGIN_EXAMPLE
gosta(pedro,leitura).
gosta(maria,leitura).
gosta(paulo,leitura).
gosta(pedro,cinema).
gosta(paulo,cinema).
gosta(vera,cinema).
gosta(paulo,boliche).
gosta(maria,boliche).
gosta(vera,boliche).
#+END_EXAMPLE

Formule as seguintes consultas e observe o resultado (pressione
``barra de espaço'' para mais respostas):

#+BEGIN_EXAMPLE
gosta(vera,X).   /* De que Vera gosta? */
gosta(X,Y).      /* Quem gosta de que? */
gosta(X,cinema). /* Quem gosta de cinema? */
#+END_EXAMPLE

Modifique a base de conhecimento, incluindo regras para a geração de
conhecimento, como abaixo:

#+BEGIN_EXAMPLE
gosta(paulo,X) :- gosta(maria,X).   /* Paulo gosta de tudo que Maria gosta */
gosta(pedro,X) :- gosta(X,boliche). /* pedro gosta de quem gosta de boliche*/
#+END_EXAMPLE

Recarregue a base de conhecimento modificada e realize a consulta
abaixo e explique o que aconteceu:

#+BEGIN_EXAMPLE
gosta(pedro,X).
#+END_EXAMPLE

*** Exercício 2

Inicialize uma nova base de conhecimento =gosta2.pl=, iniciando-a com o
conhecimento final da base =gosta1.pl=. Acrescente as regras abaixo na
base de conhecimento:

#+BEGIN_EXAMPLE
gosta(pedro,boliche).         /* Pedro gosta de boliche */
gosta(pedro,X) :- gosta(X,X). /* Pedro gosta de qualquer um que goste de si mesmo */
#+END_EXAMPLE

Repita a consulta feita, explique o que aconteceu.

#+BEGIN_EXAMPLE
gosta(pedro,X).
#+END_EXAMPLE
 
*** Exercício 3

Adicione a cláusula abaixo na base de conhecimento.

#+BEGIN_EXAMPLE
combina(X,Y,Z):- gosta(X,Z), gosta(Y,Z). /* Existe algo (Z) que X e Y gostam? */
#+END_EXAMPLE

Faça a consulta abaixo, explique o que aconteceu.

#+BEGIN_EXAMPLE
combina(X,Y,Z).
#+END_EXAMPLE

*** Exercício 4

Na base de conhecimento, adicione uma nova condição

#+BEGIN_EXAMPLE
X\=Y
#+END_EXAMPLE

à cláusula =combina=, escrevendo-a desta forma:

#+BEGIN_EXAMPLE
combina(X,Y,Z):- gosta(X,Z), gosta(Y,Z), X\=Y. /* Existe algo (Z) que X e Y gostam? */
#+END_EXAMPLE

Realize a consulta abaixo, e explique a diferença de resultado obtido
com as duas versões de =combina=.

#+BEGIN_EXAMPLE
combina(X,Y,Z).
#+END_EXAMPLE

** Restringindo Inferência

A diretiva /cut/ (o ponto de exclamação em Prolog: =!=) permite
restringir a pesquisa realizada pelo motor de inferência:

- todas as variáveis que estão associadas a valores até este ponto não assumirão novos valores
- nenhuma outra versão dos predicados chamados antes do /cut/ será considerada
- nenhuma versão subsequente do predicado no cabeçalho da regra sendo considerada será considerado
- o /cut/ sempre retorna verdadeiro

Basicamente, quaisquer respostas adicionais a cláusula corrente virão
da operação de retrocesso entre o /cut/ e o fim da regra corrente. Você
pode usar o comando =trace.= para acompanhar também o efeito do termo
/cut/.

Uso e interpretação do termo =!=.

*** Exercício 5

Crie uma base de conhecimento com os seguintes fatos e coloque no arquivo =cut1.pl=.

#+BEGIN_EXAMPLE
holiday(friday,may1).
weather(friday,fair).
weather(saturday,fair).
weather(sunday,fair).
weekend(saturday).
weekend(sunday).
/*
 Faremos piquenique em dias do fim de semana com tempo bom ou no dia primeiro de maio
 Observe que duas clausulas que possuem o mesmo lado esquerdo sao
 interpretadas como uma clausula com duas opcoes
*/
picnic(Day) :- weather(Day,fair), weekend(Day).
picnic(Day) :- holiday(Day,may1).
#+END_EXAMPLE

Faça a seguinte consulta e verifique as três respostas resultantes

#+BEGIN_EXAMPLE
picnic(When).
#+END_EXAMPLE

Mude a definição de =picnic= para o código abaixo e refaça a consulta, e
explique o que aconteceu.

#+BEGIN_EXAMPLE
picnic(Day) :- weather(Day,fair), !, weekend(Day).
picnic(Day) :- holiday(Day,may1).
#+END_EXAMPLE

*** Exercício 6

Mude novamente a definição de picnic como mostrado abaixo e refaça a
consulta, e explique o que aconteceu.

#+BEGIN_EXAMPLE
picnic(Day) :- weather(Day,fair), weekend(Day), !.
picnic(Day) :- holiday(Day,may1).
#+END_EXAMPLE

*** Exercício 7

Finalmente, mude a definição de picnic para o código abaixo e refaça a
consulta.

#+BEGIN_EXAMPLE
picnic(Day) :- !, weather(Day,fair), weekend(Day).
picnic(Day) :- holiday(Day,may1).
#+END_EXAMPLE

Explique o que aconteceu?

** Hipótese do Mundo Fechado

Em Prolog, o resultado de uma consulta ou clausula é verdadeiro ou
falso. Devemos lembrar que o resultado falso indica que ou a consulta
é realmente falsa ou nada pode ser concluído.

Como o resultado inconclusivo é inconveniente, Prolog na verdade
considera que inconclusivo = falso. Para isso, o sistema assume que
todas as informações relevantes para aquela consulta estão descritas
na base de conhecimento e que a suposição de inconclusivo = falso
realmente se aplica para aquela base.

Programadores Prolog devem estar cientes desta suposição para que
codifiquem realmente todo o conhecimento necessário a
aplicação. Porém, há um agravante na linguagem que é a negação. Se A é
uma asserção, not(A) é uma asserção que nega o valor verdadeiro
assumido para A. Então, se a avaliação de 'A' falha, o resultado da
negação será verdadeiro, ou seja, a negação do inconclusivo é uma
verdade. *Isto pode levar a erros no código muito facilmente.*

*** Exercício 8

Crie uma nova base de conhecimento com os seguintes fatos e regras.

#+BEGIN_EXAMPLE
star(sirius). /* star(X) é verdade se X e uma estrela */
star(sol).
star(vega).
orbita(mercurio,sol). /* orbita(X,Y) é verdade se X está na orbita de Y */
orbita(venus,sol).
orbita(terra,sol).
orbita(marte,sol).
orbita(lua,terra).
orbita(phobos,marte).
orbita(deimos,marte).
planeta(B) :- orbita(B,sol). /* planeta(B) é verdade se B é um planeta do sistema solar */

satelite(B) :- orbita(B,P),planeta(P). /* satelite(B) é verdade se B é um satelite de um planeta do sistema solar */

cometa(B) :- not(star(B)),not(planeta(B)),not(satelite(B)). /* Agora, o uso da negacao: cometa(B) é verdade se B nao é planeta, nem satelite, nem estrela */
#+END_EXAMPLE

Execute agora as consultas abaixo e veja o resultado, e explique o que
aconteceu.

#+BEGIN_EXAMPLE
cometa(halley).
cometa(apollo13).
orbita(halley,sol).
#+END_EXAMPLE
