# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent

* CATP #04

Este CATP serve como estudo de caso da linguagem R, para realizar
manipulação de dados. Nele, utilizaremos um arquivo com 307200
observações realizadas a partir de um programa que simula
terremotos. O arquivo com as observações contém oito colunas:
- =Iteration=: número da iteração
- =Rank=: identificador do processo
- =Time=: duração
- =Operation=: operação realizada
- =PAPI_BR_MSP=: quantidade de /branch misspredictions/
- =PAPI_TOT_CYC=: quantidade de ciclos
- =PAPI_TOT_INS=: quantidade de instruções
- =PAPI_L2_ICM=: quantidade de misses de instrução em nível L2


1. Realizar a cópia dos dados em tabela CSV compactada.

   [[./ondes3d_1_ligurian_64_grisou-5.nancy.grid5000.fr_counter.csv.gz][Ondes3D Ligurian Simulation with PAPI Counters]]

   Para carregar o arquivo, utilize obrigatoriamente a linha:

   #+begin_src R :results output :session :exports both
   library(readr);
   df <- read_csv("ondes3d_1_ligurian_64_grisou-5.nancy.grid5000.fr_counter.csv.gz", progress=FALSE, col_types=cols(
     Iteration = col_integer(),
     Rank = col_integer(),
     Time = col_double(),
     Operation = col_character(),
     PAPI_BR_MSP = col_integer(),
     PAPI_TOT_CYC = col_integer(),
     PAPI_TOT_INS = col_integer(),
     PAPI_L2_ICM = col_integer()
   ));
   df
   #+end_src

   #+RESULTS:
   #+begin_example
   # A tibble: 307,200 x 8
      Iteration  Rank       Time  Operation PAPI_BR_MSP PAPI_TOT_CYC PAPI_TOT_INS
          <int> <int>      <dbl>      <chr>       <int>        <int>        <int>
    1         1     0 0.01892877 SeisMoment         138     49129632     44953595
    2         1     4 0.01892757 SeisMoment          88     49164604     44953591
    3         1     3 0.01890731 SeisMoment          31     49125851     44953590
    4         1     1 0.01891303 SeisMoment          26     49145151     44953590
    5         1    20 0.01890111 SeisMoment          84     49098061     44953591
    6         1    18 0.01890278 SeisMoment          40     49113589     44953590
    7         1    19 0.01891470 SeisMoment          32     49137221     44953591
    8         1    17 0.01892376 SeisMoment          27     49164537     44953591
    9         1    16 0.01892209 SeisMoment          32     49159069     44953591
   10         1    15 0.01896119 SeisMoment         768     49261678     45359487
   # ... with 307,190 more rows, and 1 more variables: PAPI_L2_ICM <int>
   #+end_example
   Podemos ver que existem 307200 observações: cada uma é uma operação.

2. Contar quantas operações =Operation= são realizadas por iteração (=Iteration=).

   #+begin_src R :results output :session :exports both
   suppressMessages(library(tidyverse));
   df %>%
       group_by(Iteration) %>%
       summarize(N=n())
   #+end_src

   #+RESULTS:
   #+begin_example
   # A tibble: 300 x 2
      Iteration     N
          <int> <int>
    1         1  1024
    2         2  1024
    3         3  1024
    4         4  1024
    5         5  1024
    6         6  1024
    7         7  1024
    8         8  1024
    9         9  1024
   10        10  1024
   # ... with 290 more rows
   #+end_example
   Temos a impressão que todas as 300 iterações tem a mesma quantidade
   de operações. Para confirmar, podemos ver quantas linhas dessa
   tabela são diferentes, depois de calcular a variável =N=, assim:
   #+begin_src R :results output :session :exports both
   df %>%
       group_by(Iteration) %>%
       summarize(N=n()) %>%
       ungroup() %>% # desagrupar para poder remover a coluna Iteration
       select(-Iteration) %>%
       unique # para confirmar que todas as linhas são iguais
   #+end_src

   #+RESULTS:
   : # A tibble: 1 x 1
   :       N
   :   <int>
   : 1  1024
   Sim, cada iteração tem =1024= operações.

3. Como o exercício anterior, mas por iteração (=Iteration=) e processo (=Rank=).
   
   #+begin_src R :results output :session :exports both
   df %>%
       group_by(Rank, Iteration) %>%
       summarize(N=n()) %>%
       ungroup()
   #+end_src

   #+RESULTS:
   #+begin_example
   # A tibble: 19,200 x 3
       Rank Iteration     N
      <int>     <int> <int>
    1     0         1    16
    2     0         2    16
    3     0         3    16
    4     0         4    16
    5     0         5    16
    6     0         6    16
    7     0         7    16
    8     0         8    16
    9     0         9    16
   10     0        10    16
   # ... with 19,190 more rows
   #+end_example
   Temos a impressão que cada Rank realizar 16 operações por
   iteração. O que faria sentido, sendo que existem 64 ranks, cada um
   fazendo 16, temos o total de 1024 operações (como visto na segunda
   questão). Para confirmar, podemos selecionar apenas a coluna =N= e
   ver quantas entradas distantas nós temos:
   #+begin_src R :results output :session :exports both
   df %>%
       group_by(Rank, Iteration) %>%
       summarize(N=n()) %>%
       ungroup() %>%
       select(N) %>%
       distinct()
   #+end_src

   #+RESULTS:
   : # A tibble: 1 x 1
   :       N
   :   <int>
   : 1    16
   De fato, cada rank realiza 16 operações por iteração.

4. Calcular o tempo médio da operação =Stress= para o processo =21= para cada iteração (=Iteration=)

   - Utilize a função =mean= para calcular a média.

   Ou seja, para cada combinação única de iteração (=Iteration=), tipo
   de operação (=Operation=) e processo (=Rank=), devemos calcular a média
   de todas as operações envolvidas nesta combinação de fatores. É
   importante contar a quantidade de operações envolvidas para
   eventualmente calcular a variabilidade da média (por exemplo,
   usando o desvio padrão e um intervalo de confiança dado, assumindo
   uma distribuição gaussiana). Vamos nos limitar a calcular a média e
   contar quantas operações acontecem para cada uma daquelas
   combinações.  Mas como o exercício pede a média de cada iteração
   apenas para a operação =Stress= e o processo =21=, devemos primeiro
   filtrar:
   #+begin_src R :results output :session :exports both
   df %>%
       filter(Operation == "Stress", Rank == 21) %>%
       group_by(Iteration, Operation, Rank) %>%
       summarize(MeanDuration = mean(Time), N=n())
   #+end_src

   #+RESULTS:
   #+begin_example
   # A tibble: 300 x 5
   # Groups:   Iteration, Operation [?]
      Iteration Operation  Rank MeanDuration     N
          <int>     <chr> <int>        <dbl> <int>
    1         1    Stress    21   0.01819377     5
    2         2    Stress    21   0.01819172     5
    3         3    Stress    21   0.01820679     5
    4         4    Stress    21   0.01818929     5
    5         5    Stress    21   0.01819053     5
    6         6    Stress    21   0.01819911     5
    7         7    Stress    21   0.01819544     5
    8         8    Stress    21   0.01820064     5
    9         9    Stress    21   0.01819701     5
   10        10    Stress    21   0.01819830     5
   # ... with 290 more rows
   #+end_example
   Talvez seja interessante fazer um gráfico dessa média ao longo das
   iterações, para verificar seu comportamento com mais detalhes:
   #+begin_src R :results output graphics :file img/21-stress-average.png :exports both :width 600 :height 200 :session
   library(ggplot2)
   df %>%
       filter(Operation == "Stress", Rank == 21) %>%
       group_by(Iteration, Operation, Rank) %>%
       summarize(MeanDuration = mean(Time), N=n()) %>%
       ggplot(aes(x=Iteration, y=MeanDuration, color=Operation)) +
       geom_point() +
       geom_line(alpha=.2) +
       theme_bw(base_size=16) +
       xlab("Iteration [count]") +
       ylab("Avg. Duration [s]") +
       facet_wrap(~Rank)
   #+end_src

   #+RESULTS:
   [[file:img/21-stress-average.png]]

5. Calcule o IPC (Instruções Por Ciclo = =PAPI_TOT_INS/PAPI_TOT_CYC=)
   por número de iteração e por tipo de operação para cada processo,
   apresente somente os resultados da iteração 110.

6. Liste as observações quando o IPC for menor que o valor médio.
